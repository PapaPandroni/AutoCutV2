[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "autocut"
version = "2.0.0"
description = "Automated beat-synced video highlight creation"
readme = "README.md"
requires-python = ">=3.8"
license = { text = "MIT" }
authors = [
    { name = "AutoCut Development Team" }
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop", 
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9", 
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Video",
    "Topic :: Multimedia :: Video :: Non-Linear Editor",
]

dependencies = [
    "moviepy==2.2.1",
    "librosa>=0.10.1",
    "opencv-python>=4.8.1", 
    "psutil>=5.9.0",
    "click>=8.0.0",
]

[project.optional-dependencies]
dev = [
    # Core development tools
    "ruff>=0.8.0",                    # Fast Python linter and formatter
    "mypy>=1.17.0",                   # Static type checking
    "bandit[toml]>=1.8.0",           # Security vulnerability scanning
    
    # Testing framework and plugins
    "pytest>=7.0.0",                 # Testing framework
    "pytest-cov>=4.0.0",            # Coverage plugin for pytest
    "pytest-xdist>=3.0.0",          # Parallel test execution
    "pytest-benchmark>=4.0.0",       # Benchmarking plugin
    "pytest-timeout>=2.1.0",         # Test timeout support
    "pytest-mock>=3.10.0",          # Mock fixtures
    "pytest-asyncio>=0.21.0",       # Async test support
    "pytest-randomly>=3.12.0",       # Randomize test order
    
    # Type stubs for external libraries
    "types-psutil>=5.9.0",          # Type stubs for psutil
    "types-requests>=2.28.0",        # Type stubs for requests
    "types-setuptools>=65.0.0",      # Type stubs for setuptools
    
    # Additional development tools
    "pre-commit>=3.0.0",            # Git hooks management
    "tox>=4.0.0",                   # Testing in multiple environments  
    "interrogate>=1.5.0",           # Docstring coverage
]

test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0", 
    "pytest-benchmark>=4.0.0",
    "pytest-timeout>=2.1.0",
    "pytest-mock>=3.10.0",
]

[project.scripts]
autocut = "autocut:main"

[project.urls]
"Homepage" = "https://github.com/autocut/autocut"
"Bug Reports" = "https://github.com/autocut/autocut/issues"
"Source" = "https://github.com/autocut/autocut"

# Tool configurations

# Ruff Configuration - Fast Python linter and formatter
[tool.ruff]
# Target Python 3.8+ for compatibility  
target-version = "py38"
line-length = 88
indent-width = 4

# Exclude common directories and files
exclude = [
    ".bzr",
    ".direnv",
    ".eggs", 
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv", 
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pycache__",
    "_build",
    "buck-out",
    "build",
    "dist", 
    "node_modules",
    "site-packages",
    "venv",
    "test_media",
    "cache",
]

[tool.ruff.lint]
# Aggressive rule selection for code quality during refactoring
select = [
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings  
    "F",     # Pyflakes
    "UP",    # pyupgrade
    "B",     # flake8-bugbear
    "SIM",   # flake8-simplify
    "I",     # isort
    "N",     # pep8-naming
    "C4",    # flake8-comprehensions
    "ICN",   # flake8-import-conventions
    "T20",   # flake8-print
    "PIE",   # flake8-pie
    "PYI",   # flake8-pyi
    "PT",    # flake8-pytest-style
    "Q",     # flake8-quotes
    "RSE",   # flake8-raise
    "RET",   # flake8-return
    "SLF",   # flake8-self
    "SLOT",  # flake8-slots
    "TID",   # flake8-tidy-imports
    "TCH",   # flake8-type-checking
    "INT",   # flake8-gettext
    "ARG",   # flake8-unused-arguments
    "PTH",   # flake8-use-pathlib
    "TRY",   # tryceratops
    "FLY",   # flynt
    "PERF",  # Perflint
    "FURB",  # refurb
    "LOG",   # flake8-logging
    "RUF",   # Ruff-specific rules
]

# Ignore specific rules that may interfere with refactoring
ignore = [
    "E501",    # Line too long (handled by formatter)
    "E203",    # Whitespace before ':' (conflicts with Black)
    "UP007",   # Use `X | Y` for type annotations (Python 3.8 compatibility)
    "TRY003",  # Avoid specifying long messages outside exception class
    "B008",    # Do not perform function calls in argument defaults
    "B905",    # `zip()` without an explicit `strict=` parameter
    "ARG002",  # Unused method argument (common in interfaces)
    "PLR0913", # Too many arguments to function call
    "PLR0912", # Too many branches
    "PLR0915", # Too many statements
    "C901",    # Function is too complex
    "SIM108",  # Use ternary operator instead of if-else
    "PT011",   # pytest.raises() is too broad
    "TID252",  # Prefer absolute imports over relative imports
]

# Allow auto-fixing for these rules
fixable = ["ALL"]
unfixable = [
    "F401",  # Don't remove unused imports during refactoring
    "F841",  # Don't remove unused variables during refactoring  
]

# Per-file customizations
[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "S101",     # Use of assert in tests
    "T201",     # Print statements in tests
    "ARG",      # Unused arguments in fixtures
    "FBT",      # Boolean trap
    "PLR2004",  # Magic values
]
"**/__init__.py" = [
    "F401",     # Imported but unused
    "F403",     # Star imports
]
"autocut.py" = [
    "T201",     # Print statements (CLI tool)
]

[tool.ruff.lint.isort]
known-first-party = ["src", "autocut"]
force-single-line = false
combine-as-imports = true

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double" 
inline-quotes = "double"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.mccabe]
max-complexity = 12

# Formatter configuration
[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true

# MyPy Configuration - Static type checking with strict mode
[tool.mypy]
python_version = "3.12"

# Enable strict mode (equivalent to --strict)
strict = true

# Additional strict options beyond default strict mode
warn_return_any = true
warn_unused_configs = true
warn_unreachable = true
strict_concatenate = true
enable_error_code = [
    "redundant-expr",
    "truthy-bool", 
    "ignore-without-code",
    "unused-awaitable",
]

# Display configuration
show_error_codes = true
show_column_numbers = true
show_error_context = true
pretty = true
color_output = true
error_summary = true

# Performance and caching
cache_dir = ".mypy_cache"
sqlite_cache = true
incremental = true

# Allow gradual typing during refactoring
allow_redefinition = true
local_partial_types = true

# Third-party libraries without stubs  
[[tool.mypy.overrides]]
module = [
    "moviepy.*",
    "librosa.*", 
    "cv2.*",
    "psutil.*",
    "click.*",
]
ignore_missing_imports = true

# Gradual typing for legacy modules during refactoring
[[tool.mypy.overrides]]
module = [
    "src.clip_assembler",
    "src.utils",
    "src.video_analyzer", 
    "src.audio_analyzer",
]
# Temporarily disable strict checking for legacy code
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
warn_return_any = false

# Test files - less strict requirements
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
warn_return_any = false
allow_untyped_globals = true

# Bandit Configuration - Security vulnerability scanning
[tool.bandit]
exclude_dirs = [
    ".venv",
    "venv",
    "env", 
    ".git",
    "__pycache__",
    ".pytest_cache",
    ".mypy_cache",
    ".ruff_cache",
    "build",
    "dist", 
    "test_media",
    "cache",
    "htmlcov",
    "tests",  # Exclude tests from security scanning
]

# Skip specific tests that may have false positives for this codebase
skips = [
    "B101",  # Use of assert (allow in tests and development)
    "B603",  # subprocess call without shell=True (FFmpeg usage)
    "B607",  # Starting process with partial executable path (FFmpeg)
    "B324",  # Use of insecure MD5 or SHA1 hash function (may be used for non-security)
]

# Focus on critical security tests
tests = [
    "B102",  # Test for exec used
    "B103",  # Test for set_bad_file_permissions
    "B104",  # Test for hardcoded_bind_all_interfaces
    "B105",  # Test for hardcoded_password_string
    "B106",  # Test for hardcoded_password_funcarg
    "B107",  # Test for hardcoded_password_default
    "B108",  # Test for hardcoded_tmp_directory
    "B110",  # Test for try_except_pass
    "B112",  # Test for try_except_continue
    "B201",  # Test for flask_debug_true
    "B301",  # Test for pickle
    "B302",  # Test for marshal
    "B303",  # Test for md5
    "B304",  # Test for insecure_cipher  
    "B305",  # Test for cipher_modes
    "B306",  # Test for mktemp_q
    "B307",  # Test for eval
    "B308",  # Test for mark_safe
    "B309",  # Test for httpsconnection
    "B310",  # Test for urllib_urlopen
    "B311",  # Test for random
    "B312",  # Test for telnetlib
    "B313",  # Test for xml_bad_cElementTree
    "B314",  # Test for xml_bad_ElementTree
    "B315",  # Test for xml_bad_expatreader
    "B316",  # Test for xml_bad_expatbuilder
    "B317",  # Test for xml_bad_sax
    "B318",  # Test for xml_bad_minidom
    "B319",  # Test for xml_bad_pulldom
    "B320",  # Test for xml_bad_xmlrpc
    "B321",  # Test for ftplib
    "B322",  # Test for input
    "B323",  # Test for unverified_context
    "B401",  # Test for import_telnetlib
    "B402",  # Test for import_ftplib
    "B403",  # Test for import_pickle
    "B404",  # Test for import_subprocess
    "B405",  # Test for import_xml_etree
    "B406",  # Test for import_xml_sax
    "B407",  # Test for import_xml_expat
    "B408",  # Test for import_xml_xmlrpc
    "B409",  # Test for import_xml_minidom
    "B410",  # Test for import_xml_pulldom
    "B411",  # Test for import_xmlrpclib
    "B413",  # Test for import_pycrypto
    "B501",  # Test for request_with_no_cert_validation
    "B502",  # Test for ssl_with_bad_version
    "B503",  # Test for ssl_with_bad_defaults
    "B504",  # Test for ssl_with_no_version
    "B505",  # Test for weak_cryptographic_key
    "B506",  # Test for yaml_load
    "B507",  # Test for ssh_no_host_key_verification
    "B601",  # Test for paramiko_calls
    "B602",  # Test for subprocess_popen_with_shell_equals_true
    "B604",  # Test for any_other_function_with_shell_equals_true
    "B605",  # Test for start_process_with_a_shell
    "B606",  # Test for start_process_with_no_shell
    "B608",  # Test for hardcoded_sql_expressions
    "B609",  # Test for linux_commands_wildcard_injection
    "B610",  # Test for django_extra_used
    "B611",  # Test for django_rawsql_used
    "B701",  # Test for jinja2_autoescape_false
    "B702",  # Test for use_of_mako_templates
    "B703",  # Test for django_mark_safe
]

# Pytest Configuration - Testing framework with coverage
[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*", "*Test"]
python_functions = ["test_*"]

# Comprehensive test options for large refactoring projects
addopts = [
    "-ra",                              # Show summary info for all test outcomes
    "--strict-markers",                 # Strict marker usage
    "--strict-config",                  # Strict config validation
    "--tb=short",                       # Shorter traceback format
    "--show-capture=no",               # Don't show captured output on passing tests
    "--maxfail=5",                     # Stop after 5 failures
    "--cov=src",                       # Coverage for source directory  
    "--cov=autocut.py",                # Coverage for main CLI module
    "--cov-report=term-missing",       # Terminal report with missing lines
    "--cov-report=html:htmlcov",       # HTML coverage report
    "--cov-report=xml:coverage.xml",   # XML report for CI/CD
    "--cov-report=lcov:coverage.lcov", # LCOV format for VS Code
    "--cov-branch",                    # Enable branch coverage
    "--cov-fail-under=80",             # Fail if coverage drops below 80%
    "--cov-context=test",              # Add test context to coverage
    "--durations=10",                  # Show 10 slowest tests
    "--durations-min=1.0",             # Only show tests slower than 1 second
]

# Test discovery patterns
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "fast: marks tests as fast unit tests",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "benchmark: marks tests as benchmark tests",
    "gpu: marks tests that require GPU acceleration",
    "network: marks tests that require network access",
    "ffmpeg: marks tests that require FFmpeg",
    "gui: marks tests that require GUI components",
    "memory: marks tests that are memory intensive",
]

# Filter warnings to reduce noise during testing
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning", 
    "ignore::FutureWarning",
    "ignore:.*MoviePy.*:UserWarning",
    "ignore:.*librosa.*:UserWarning",
    "ignore:.*opencv.*:UserWarning",
    "ignore:unclosed.*:ResourceWarning",
    "error::pytest.PytestUnraisableExceptionWarning",
]

# Pytest plugins and options
asyncio_mode = "auto"
timeout = 300  # 5 minute timeout for individual tests

# Coverage.py Configuration - Comprehensive coverage reporting
[tool.coverage.run]
source = ["src", "."]
branch = true
context = "${COVERAGE_CONTEXT}"

# Patterns to include in coverage
include = [
    "src/*",
    "autocut.py",
    "*/autocut/*",
]

# Patterns to omit from coverage  
omit = [
    "*/tests/*",
    "*/test_*",
    "*/*_test.py", 
    "*/conftest.py",
    "*/cache/*",
    "*/temp/*",
    "*/__pycache__/*",
    ".venv/*",
    "venv/*", 
    "env/*",
    "build/*",
    "dist/*",
    "test_media/*",
    "htmlcov/*",
    "setup.py",
    "*/.tox/*",
]

# Coverage plugins  
# plugins = ["coverage_conditional_plugin"]  # Disabled - plugin not available

[tool.coverage.report]
# Reporting options
show_missing = true
skip_covered = false
skip_empty = true
precision = 2
sort = "Cover"

# Fail if coverage drops below threshold
fail_under = 80

# Lines to exclude from coverage reporting
exclude_lines = [
    # Standard pragmas
    "pragma: no cover",
    "pragma: nocover", 
    "coverage: ignore",
    
    # Debug code
    "def __repr__",
    "if self\\.debug:",
    "if settings\\.DEBUG",
    
    # Defensive programming
    "raise AssertionError", 
    "raise NotImplementedError",
    "raise ValueError\\(",
    "raise TypeError\\(",
    
    # Unreachable code
    "if 0:",
    "if False:",
    "if __name__ == .__main__.:",
    
    # Type checking
    "if TYPE_CHECKING:",
    "if typing\\.TYPE_CHECKING:",
    
    # Abstract methods and protocols
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "@(abc\\.)?abstractproperty",
    "@(abc\\.)?abstractclassmethod",
    "@(abc\\.)?abstractstaticmethod",
    
    # Platform specific
    "if sys\\.platform",
    "if platform\\.system",
    
    # Exception handling  
    "except ImportError:",
    "except ModuleNotFoundError:",
    "except .*Error as .*:",
]

# Partial line exclusions
partial_branches = [
    "pragma: no branch",
    "if TYPE_CHECKING:",
    "if typing\\.TYPE_CHECKING:",
]

[tool.coverage.html]
directory = "htmlcov"
title = "AutoCut V2 - Code Coverage Report"
show_contexts = true

[tool.coverage.xml]
output = "coverage.xml"

[tool.coverage.lcov]
output = "coverage.lcov"

[tool.coverage.json]
output = "coverage.json"
pretty_print = true

# Context configuration for detailed coverage tracking
[tool.coverage.contexts]
[tool.coverage.paths]
source = [
    "src/",
    ".venv/lib/python*/site-packages/", 
    ".tox/*/lib/python*/site-packages/",
]